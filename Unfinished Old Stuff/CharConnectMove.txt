import java.lang.*;
import ////////


public class CharConnectMove implements Runnable{  	//DetailedModel will extend this
  int posX;
  int posY;
  double BordsizeW;
  double BordsizeH;

  int centerX;
  int centerY;

  int MaxHealth = 100;
  int MinHealth = 25;
  int currHealth;

  double timerCycle = 250;

  ControllerClass placeControl;


////////////////////////////////////////////////////////
 CharConnectMove(ControllerClass controller, int x, int y, double width, double height){
     posX = x;
     posY = y;

     centerX = x+width/2;
     centerY = y+height/2;

     BordsizeW = width;
     BordsizeH = height;

     placeControl = controller;

     currHealth = Math.random(MinHealth, MaxHealth);

     this.draw();

     placeControl.addPlayer(this);  //also has getDir and setDir
  }


///////////
  public void move(int dx, int dy){
     centerX += dx;
     centerY += dy;
     
     placeControl.gc.emptyRect(x, y, BordsizeW, BordsizeH);
    
     placeControl.gc.fillRect(x += dx, y += dy, BordsizeW, BordsizeH);

  }


///////////
  public void firstPersonView(boolean status){  //decides which character will be used
    if(status){
       placeControl.setEnvironment(centerX, centerY);
    }
    else{
      placeControl.normalView();
    }
  }

///////////
  public boolean contains(CharConnectMove ccm){
     if(ccm.getX() <= centerX+(BordsizeW/2) && ccm.getX() >= centerX-(BordsizeW/2)){
        if(ccm.getY() <= centerY+(BordsizeH/2) && ccm.getY() >= centerY-(BordsizeH/2)){
           	return true;
        }
    }

     return false;
   }



///////////
  public void interact(Object o){
      if(o.getClass().super.getName().equals("Destructible")){


     }
     else{
         o
      }
   }

/////////////More...



//////
public boolean equals(Object o){
   if(o.getClass().getName().equals(this.getClass().getName()) && posX == o.getClass().getX() && posY == o.getClass().getY()
       && BordsizeW == o.getClass().getWidth() && BordsizeH == o.getClass().getHeight()){
          
          return true;
    }

    return false;

  }


//////////
  public void run(){
     if(timerCycle >= 0) timerCycle--;

     else if(timerCycle == 0){
        timerCycle = -1;
        move(posX, posY);
     }

     Thread.sleep(1);	
  }


///////////
  private void onAttacked(int damage){
      currHealth -= damage;

    if(currHealth <= 0) this.hide();
  }

//////////
public void walking(String direction){
  if(direction.equals("Up")){
     posY += 1;
     centerY += 1;
  }
  else if(direction.equals("Down")){
     posY -= 1;
     centerY -= 1;
  }
  else if(direction.equals("Right")){
     posX += 1;
     centerX += 1;
   }
   else if(direction.equals("Left")){
      posX -= 1;
      centerX -= 1;
   }

  timerCycle = 250;

}



/////////////
  public void draw(){
     placeControl.gc.fillRect(x, y, BordsizeW, BordsizeH);
  }



///////
  public void hide(){
    placeControl.removePlayer(this);
    placeControl.gc.emptyRect(x, y, BordsizeW, BordsizeH);
  }



/////////
  public void show(){
    placeControl.addPlayer(this);
    draw();
  }



///////////
  public int getX(){
     return centerX;
  }



/////////
  public int getY(){
     return centerY;
  }


//////////
  public int getWidth(){ 
    return BordsizeW;
  }



///////////
  public int getHeight(){
    return BordsizeH;
  }

}