
enum Colors{
	RED, GREEN, YELLOW
}


						//values to affect different wait times and order of switching between those values


class ExtraTh implements Runnable{
	private Colors cs;
	private Thread th;
	static boolean stop = false;
	boolean changed = false;
	
	ExtraTh(Colors lc){
		th = new Thread(this);
		cs = lc;
		th.start();
	}

	ExtraTh(){
		th = new Thread(this);
		cs = Colors.RED;
		th.start();
	}

   public void run(){
	
	while(!stopped){	

	try{
	switch(cs){
	
	case RED:
		Thread.sleep(4500);
		break;

	case GREEN:
		Thread.sleep(10000);
		break;
	
	case YELLOW:
		Thread.sleep(2000);
		break;
	}
	}catch(InterruptedException exc){
		System.out.println("Thread sleep interrupted);
	}
	
	changeColor();
	}
	}

						//defining methods after sleep and conditions to affect variables


  synchronized void changeColor(){
	switch(cs){
		
	case RED:
		cs = Colors.GREEN;
		break;

	case GREEN:
		cs = Colors.YELLOW;
		break;

	case YELLOW:
		cs = Colors.RED;
		break;
	}
	
	changed = true;
	notify();
	}


   synchronized void MainWait(){
	try{
	while(!changed){
		wait();
	}
	}catch(InterruptedException exc){
		System.out.println("Waiting interrupted");
	}
	
	changed = false;
	}


   synchronized void Cancelation(){
	stopped = true;
	}


   synchronized int getColor(){
	return cs;
	}
}




class SetWaitChangeNotifySeperatedMethods(){
	public static void main(String args[]){
	
	ExtraTh e1 = new ExtraTh(Colors.GREEN);
	ExtraTh e2 = new ExtraTh(Colors.GREEN); //only one is needed really

	for(int i = 0; i < 9; i++){
		System.out.println("Colors are: " + e1.getColor() + " and " + e2.getColor(););
		e1.MainWait();
	}

	e1.Cancelation();
	
	}
}